generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Student {
  id    String @id
  email String @unique
  name  String

  parts       Part[]   @relation("PartStudents")
  leaderParts Part[]   @relation("PartLeaders")
  wallets     Wallet[]

  certifications StudentCertification[]
}

model Teacher {
  id    String @id
  name  String
  email String @unique

  wallets        Wallet[]
  certifications TeacherCertification[]
}

model Part {
  id     String @id @default(uuid())
  name   String
  budget Int

  students Student[] @relation("PartStudents")
  leaders  Student[] @relation("PartLeaders")
  walletId String
  wallet   Wallet    @relation(fields: [walletId], references: [id], onDelete: Cascade)

  purchases Purchase[]

  @@index([walletId])
}

model Wallet {
  id      String @id @default(uuid())
  name    String
  budget  Int
  eventId String

  parts              Part[]
  teachers           Teacher[]
  accountantStudents Student[]
}

model StudentCertification {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  approved   Boolean  @default(false)
  signedById String
  signedBy   Student  @relation(fields: [signedById], references: [id])

  purchaseRequest  Purchase[] @relation("RequestCert")
  purchaseApproval Purchase[] @relation("AccountantCert")

  @@index([signedById])
}

model TeacherCertification {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  approved   Boolean  @default(false)
  signedById String
  signedBy   Teacher  @relation(fields: [signedById], references: [id])

  purchaseApproval Purchase[] @relation("TeacherCert")

  @@index([signedById])
}

model Purchase {
  id            String    @id @default(cuid())
  receiptNumber Int?
  note          String
  createdAt     DateTime  @default(now())
  completedAt   DateTime?
  returnedAt    DateTime?
  actualUsage   Int?
  checkedAt     DateTime?
  updatedAt     DateTime? @updatedAt

  partId String
  part   Part   @relation(fields: [partId], references: [id])

  items PurchaseItem[]

  requestCertId    String
  requestCert      StudentCertification  @relation(name: "RequestCert", fields: [requestCertId], references: [id])
  accountantCertId String?
  accountantCert   StudentCertification? @relation(name: "AccountantCert", fields: [accountantCertId], references: [id])
  teacherCertId    String?
  teacherCert      TeacherCertification? @relation(name: "TeacherCert", fields: [teacherCertId], references: [id])

  @@index([partId])
}

model PurchaseItem {
  id         String @id @default(uuid())
  purchaseId String
  quantity   Int
  productId  String

  purchase Purchase @relation(fields: [purchaseId], references: [id])
  product  Product  @relation(fields: [productId], references: [id])
}

model Product {
  id          String  @id @default(uuid())
  name        String
  price       Int
  description String?
  doesShare   Boolean @default(false)

  purchaseItems PurchaseItem[]
}
