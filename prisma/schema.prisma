generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Event {
  id      String   @id @default(uuid())
  name    String
  wallets Wallet[]

  budgetLimit Int
}

model User {
  id    String @id @default(uuid())
  email String @unique
  name  String

  // 所属関係
  userParts   UserPart[]

  // 購入関係
  requestedPurchases          Purchase[] @relation("RequestedPurchases")
  accountantApprovedPurchases Purchase[] @relation("AccountantApprovedPurchases")
}

model Part {
  id          String @id @default(uuid())
  name        String
  budgetLimit Int

  users    UserPart[]
  walletId String
  wallet   Wallet     @relation(fields: [walletId], references: [id], onDelete: Cascade)

  purchases Purchase[]

  @@index([walletId])
}

model Wallet {
  id             String       @id @default(uuid())
  name           String
  budgetLimit    Int
  eventId        String
  event          Event        @relation(fields: [eventId], references: [id])

  parts    Part[]
  teachers TeacherWallet[]
}


model UserPart {
  id     String @id @default(uuid())
  userId String
  partId String
  roleId Int

  user User @relation(fields: [userId], references: [id])
  part Part @relation(fields: [partId], references: [id])

  @@unique([userId, partId])
  @@index([userId])
  @@index([partId])
}

model Teacher {
  id    String @id @default(uuid())
  name  String
  email String @unique

  wallets TeacherWallet[]

  approvedPurchases Purchase[]
}

model TeacherWallet {
  id        String @id @default(uuid())
  teacherId String
  walletId  String

  teacher Teacher @relation(fields: [teacherId], references: [id])
  wallet  Wallet  @relation(fields: [walletId], references: [id])

  @@unique([teacherId, walletId])
  @@index([teacherId])
  @@index([walletId])
}

model Purchase {
  id          String   @id @default(cuid())
  itemName    String
  amount      Int
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  part   Part   @relation(fields: [partId], references: [id])
  partId String

  requestedBy   User   @relation("RequestedPurchases", fields: [requestedById], references: [id])
  requestedById String

  approvedByAccountant User?   @relation("AccountantApprovedPurchases", fields: [accountantApprovalId], references: [id])
  accountantApprovalId String?

  approvedByTeacher Teacher? @relation(fields: [teacherApprovalId], references: [id])
  teacherApprovalId String?

  items PurchaseItem[]

  @@index([partId])
  @@index([requestedById])
  @@index([accountantApprovalId])
  @@index([teacherApprovalId])
}

model PurchaseItem {
  id          String   @id @default(uuid())
  purchaseId  String
  purchase    Purchase @relation(fields: [purchaseId], references: [id])
  itemName    String
  amount      Int
  description String
  productId   String

  product Product @relation(fields: [productId], references: [id])
}

model Product {
  id          String  @id @default(uuid())
  name        String
  price       Int
  description String?

  purchaseItems PurchaseItem[]
}
